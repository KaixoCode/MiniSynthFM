<module name="Synth" var-name="Synth" interface="normal">

  <!-- ================================================ -->

  <param name="Pitch Bend Parameter"
         default="0.5"
         interface="$self.params.pitchBend = $value"/>
  
  <!-- ================================================ -->

  <module name="Operator" short-name="Op" var-name="oscillator" count="3">
    <param name="Volume"
           default="0"
           transform="Decibel[0.f, 1.9952623149688795f]"
           format="Decibels"
           interface="$self.params.volume[$oscillator] = $value * 2">
    </param>

    <param name="Tune"
           default="0"
           transform="Range[-12.f, 12.f]"
           format="Pitch"
           interface="$self.params.oscillator[$oscillator].tune($value * 24 - 12)"/>

    <param name="Octave"
           default="1" 
           steps="3"
           transform="Group[3]"
           format="Group[-1, 0, 1]"
           interface="$self.params.oscillator[$oscillator].octave(normalToIndex($value, 3) - 1)"/>
    
    <param name="Wave"
           default="0" 
           steps="4"
           transform="Group[4]"
           format="Group[Sine, Triangle, Saw, Square]"
           interface="$self.params.oscillator[$oscillator].waveform($value)"/>
    
    <param name="FM" var-name="fm"
           default="50"
           transform="Range[0.f, 100.f]"
           format="Percent"
           interface="$self.params.fm[$oscillator] = $value * 4"/>

    <param name="Output"
           default="1"
           steps="2"
           transform="Group[2]"
           format="Group[Off, On]"
           interface="$self.params.outputOscillator[$oscillator] = $value > 0.5">
      <index if="oscillator=1 or oscillator=2" default="0"/>
    </param>

  </module>

  <!-- ================================================ -->

  <param name="Voices" 
         default="8" 
         steps="8" 
         transform="Integer[1, 8]"
         format="Integer"/>

  <param name="Legato" 
         default="1" 
         steps="2" 
         transform="Group[2]" 
         format="Group[Off, On]"/>

  <!-- ================================================ -->

  <module name="Lfo" count="1" namespace="{name}" short-namespace="{short-name}">
    <param name="Time"
           default="1"
           transform="Power[0.05f, 100.f, 4.f]"
           format="Frequency"/>

    <param name="Depth"
           default="100"
           transform="Range[0.f, 100.f]"
           format="Percent"/>

    <param name="Synced"
           short-name="Sync"
           default="0"
           steps="2"
           transform="Group[2]"
           format="Group[Off, On]"/>

    <param name="Tempo"
           default="6"
           steps="13"
           transform="Group[13]"
           format="Group[Freeze, 32/1, 16/1, 8/1, 4/1, 2/1, 1/1, 1/2, 1/4, 1/8, 1/16, 1/32, 1/64]"/>

    <param name="Waveform"
           short-name="Wave"
           default="0"
           steps="6"
           transform="Group[6]"
           format="Group[Sine, Triangle, Saw, Square, Quantized, Noise]"/>
  </module>

  <!-- ================================================ -->

  <module name="Envelope" short-name="Env" count="2">
    <param name="Loop"
           default="0"
           transform="Group[2]"
           format="Group[Off, On]"
           interface="$self.params.envelope[$envelope].loop = $value > 0.5"/>

    <param name="Level"
           default="50"
           transform="Range[0.f, 100.f]"
           format="Percent"
           interface="$self.params.envelopeLevel[$envelope] = $value"/>

    <param name="Attack"
           default="10"
           transform="Power[10.f, 5000.f, 2.f]"
           format="Time"
           interface="$self.params.envelope[$envelope].attack($value * $value * 4990 + 10)"/>

    <param name="Decay"
           default="200"
           transform="Power[10.f, 5000.f, 2.f]"
           format="Time"
           interface="$self.params.envelope[$envelope].decay($value * $value * 4990 + 10)"/>

    <param name="Sustain"
           default="100"
           transform="Range[0.f, 100.f]"
           format="Percent"
           interface="$self.params.envelope[$envelope].sustain($value)"/>

    <param name="Release"
           default="60"
           transform="Power[10.f, 5000.f, 2.f]"
           format="Time"
           interface="$self.params.envelope[$envelope].release($value * $value * 4990 + 10)"/>
  </module>

  <module name="Gain">
    <param name="Gate"
           default="0"
           transform="Group[2]"
           format="Group[Off, On]"
           interface="$self.params.envelope[2].trigger = !($value > 0.5)"/>

    <param name="Level"
           default="50"
           transform="Range[0.f, 100.f]"
           format="Percent"
           interface="$self.params.envelopeLevel[2] = $value"/>

    <param name="Attack"
           default="10"
           transform="Power[10.f, 5000.f, 2.f]"
           format="Time"
           interface="$self.params.envelope[2].attack($value * $value * 4990 + 10)"/>

    <param name="Decay"
           default="200"
           transform="Power[10.f, 5000.f, 2.f]"
           format="Time"
           interface="$self.params.envelope[2].release($value * $value * 4990 + 10)"/>
  </module>

  <!-- ================================================ -->

  <module name="Filter">
    <param name="Enable"
           default="1"
           transform="Group[2]"
           format="Group[Off, On]"
           interface="$self.params.filter.enable = $value > 0.5"/>

    <param name="Cutoff"
           var-name="frequency"
           short-name="Cutoff"
           default="16000"
           transform="Log[60.f, 16000.f]"
           format="Frequency"
           interface="$self.params.filter.frequency = $value"/>
    
    <param name="Resonance"
           short-name="Reso"
           default="0"
           transform="Range[0.f, 100.f]"
           format="Percent"
           interface="$self.params.filter.resonance = $value"/>

    <param name="Drive"
           default="0"
           transform="Range[0.f, 100.f]"
           format="Percent"
           interface="$self.params.filter.drive = $value"/>
  </module>
  
  <!-- ================================================ -->

</module>